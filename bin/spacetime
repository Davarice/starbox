#! /bin/bash

cd ~/.spacetime

#PRETTY COLORS
nc="\e[0m"
black="\e[0;30m"
red="\e[0;31m"
green="\e[0;32m"
orange="\e[0;33m"
blue="\e[0;34m"
purple="\e[0;35m"
cyan="\e[0;36m"
lgray="\e[0;37m"
dgray="\e[1;30m"
lred="\e[1;31m"
lgreen="\e[1;32m"
yellow="\e[1;33m"
lblue="\e[1;34m"
lpurple="\e[1;35m"
lcyan="\e[1;36m"
white="\e[1;37m"

lastworld=""
offset="$(($(cat .offset)+60))"
offsetSimp="00"

function calcOffset() {
	if (( $offset > 119 )); then
		offset="$(($offset-60))"
		inctime "1"
	fi
	if (( $offset < 60 )); then
		offset="$(($offset+60))"
		inctime "-1"
	fi
	offsetSimp="$(($offset%60))"
	(( ${#offsetSimp} == "1" )) && offsetSimp="0$offsetSimp" # || hourcycPad="$hourcyc"
	echo "$offsetSimp" > .offset
}

function localtime() {
	world="$1"
	echo -e "${lcyan}$world: ${lblue}$(cat $world/.cycle-day) ${blue}hours in a day, ${lblue}$(cat $world/.cycle-month) ${blue}days in a month, ${lblue}$(cat $world/.cycle-year) ${blue}months in a year (${lcyan}$(($(cat $world/.cycle-month)*$(cat $world/.cycle-year)))${blue} days/year)${nc}"
#	echo -e "${blue}Located in the ${lcyan}$(cat $world/.star)${blue} system ${lblue}($(cat $world/.coordinates))"
	ret=$(pwd)
	cd $world/.star
	starName=$(pwd -P | grep -o '[^/]*$')
	cd $ret
	echo -e "${blue}Located in the ${lcyan}$starName${blue} system ${lblue}($(cat .stars/$starName/.coordinates || echo "n/a")) (M☉=$(awk -v m=$(cat $world/.star/.mass) 'BEGIN{print m/100}'))"
	for city in $(ls $world); do

		hour="$(($(cat .current)+$(cat $world/$city)))" #hours since epoch adjusted for timezone
		hourcyc="$(($hour%$(cat $world/.cycle-day)))" #earth: 00-23
		day="$(($hour/$(cat $world/.cycle-day)))" #total days since epoch
		daycyc="$(($day%$(cat $world/.cycle-month)+1))" #earth: 1-30
		month="$(($day/$(cat $world/.cycle-month)))" #total months since epoch
		monthcyc="$(($month%$(cat $world/.cycle-year)+1))" #earth: 1-12
		year="$(($month/$(cat $world/.cycle-year)))" #total years since epoch


		dayLengthFull="$(cat $world/.cycle-day)"
		dayLength="$(($dayLengthFull/2))"
		dayNow="$(($hourcyc/($dayLength/2)))"

		(( ${#hourcyc} == "1" )) && hourcycPad="0$hourcyc" || hourcycPad="$hourcyc"

		dawn=$(($dayLengthFull/4))
		dusk=$(($dawn*3))

		if (( $hourcyc >= $dawn )) && (( $hourcyc < $dusk )); then #day
#		if (( "$dawn" <= "$hourcyc" < "$dusk" )); then #day
			echo -en "${lgreen}$hourcycPad:${offsetSimp} "
		else
			echo -en "${lblue}$hourcycPad:${offsetSimp} "
		fi

		echo -en " <"
#		scale=`echo -en "${lblue}"; printf '.%.0s' {1..$(($(cat $world/.cycle-day)/4))}; echo -en "${lgreen}"; printf '.%.0s' {1..$(($(cat $world/.cycle-day)/2))}; echo -en "${lblue}"; printf '.%.0s' {1..$(($(cat $world/.cycle-day)/4))}`
		scale=`eval printf '.%.0s' {1..$dayLength}`
		echo "$scale" | head -c "$((($hourcyc+($dayLength/2))%$dayLength))" -
		echo -en "|"
		echo -en "$scale" | tail -c $(( $dayLength-(($hourcyc+($dayLength/2))%$dayLength)-1 )) -
		echo -en "> "

		seasonLength="$(($(cat $world/.cycle-year)/4))"
		seasonNow="$((($monthcyc-1)/$seasonLength))"
		if (( "$seasonNow" == "0" )); then #winter
			echo -en "${cyan}"
		elif (( "$seasonNow" == "1" )); then #spring
			echo -en "${green}"
		elif (( "$seasonNow" == "2" )); then #summer
			echo -en "${orange}"
		else #fall
			echo -en "${red}"
		fi
		echo -en "$year/$monthcyc/$daycyc${nc}"
		echo -e " -- ${yellow}$city"
	done
}

function inctime() {
	delta="$1"
#	if (( "$delta" != *"\+"* )) && (( "$delta" != *"-"* )); then
	if [[ "$delta" == "0" ]]; then
		echo -e "${lred}Incremental argument invalid${nc}"
	elif (( "$(($delta/$delta))" == "1" )); then
		echo "$(($(cat .current)+$delta))" > .current
		echo -e "${lcyan}Time incremented${nc}"
		echo "$(date) [GST:$(cat .current):${offsetSimp}] Time change: $delta hour(s)" >> .adventure.log
#		echo "$(date) [GST:$(cat .current):${offsetSimp}] New time" >> .adventure.log
	else
		echo -e "${lred}Incremental argument invalid${nc}"
	fi
}

function newplace() {
	npList="System World Site"
	echo -e "What type of location will be created?${dgray}"
	select np in $npList; do
		if [[ "$np" == "System" ]]; then ###CREATE NEW STAR
			echo -en "${white}Charting new star system. Enter name: ${nc}>"
			read starName
			mkdir .stars/$starName && echo "$(date) New system defined: $starName" >> .adventure.log || echo -e "${lred}Error${nc}"
			mkdir .stars/$starName/Planets

			echo -en "${white}How many hundredths of a solar mass? ${nc}>"
			read starMass
			echo "$starMass" > .stars/$starName/.mass

			echo -en "${white}Enter coordinates: ${nc}>"
			read systemCoord
			[[ "$systemCoord" == "" ]] || echo "$systemCoord" > .stars/$starName/.coordinates
		fi
		if [[ "$np" == "World" ]]; then ###CREATE NEW WORLD
			echo -en "${white}Surveying new world. Enter name: ${nc}>"
			read planetName
			mkdir $planetName && echo "$(date) New world defined: $planetName" >> .adventure.log && lastworld=$planetName || echo -e "${lred}Error${nc}"

			echo -en "${white}What star system is it in? ${nc}>"
#			read systemName
			select systemName in $(ls .stars); do
				echo "science"
				ln -s $(pwd)/.stars/$systemName $(pwd)/$planetName/.star
				ln -s $(pwd)/$planetName $(pwd)/.stars/$systemName/Planets/$planetName
				break
			done

			echo -en "${white}How many galactic standard hours in a day? ${nc}>"
			read hourDay
			echo "$hourDay" > $planetName/.cycle-day

			echo -en "${white}How many days in a month? ${nc}>"
			read dayMonth
			echo "$dayMonth" > $planetName/.cycle-month

			echo -en "${white}How many months in a year? ${nc}>"
			read monthYear
			echo "$monthYear" > $planetName/.cycle-year
		fi
		if [[ "$np" == "Site" ]]; then ###CREATE NEW SITE
			echo -e "${white}Building new surface location. Enter target world:${dgray}"
			select pla in $(ls); do
				echo -en "${white}Enter site name: ${nc}>"
				read siteName
				echo -en "${white}Enter site timezone (relative to local Prime Meridian): ${nc}>"
				read siteTime
				sitePre="$(($(cat $pla/.cycle-day)/2+$siteTime+1))"
				(( ${#sitePre} == "1" )) && sitePre="0$sitePre"
				siteFullName="$sitePre-$siteName"
				echo -e "$siteTime" > "$pla/$siteFullName" && echo "$(date) New site defined: $siteName on $pla" >> .adventure.log || echo -e "${lred}Error${nc}"
				break
			done
		fi
		break
	done
}

function printSystemCoordinates() {
	sys=$lastworld/.star
	rm -rf .mapwork
	mkdir ".mapwork"
	for world in $(ls $lastworld/.star/Planets); do #find planet coordinates
		x=0
		y=0
		rho=$(spacetime-orbit radius $world)
		theta=$(spacetime-orbit angle $world)
		phi=$(awk -v deg=$theta 'BEGIN{print deg/57.2958}')
		x="$(awk -v rho=$rho -v phi=$phi 'BEGIN{print 10*rho*cos(phi)}')"
		y="$(awk -v rho=$rho -v phi=$phi 'BEGIN{print 10*rho*sin(phi)}')"

		echo "$x" > $world/.posX
		echo "$y" > $world/.posY

		x=${x%.*}
		y=${y%.*}
		(("$x"=="-0")) && x=0
		(("$y"=="-0")) && y=0
		echo "$x $y" > ".mapwork/$world"
		echo "$world: ($x,$y)"
		echo "   ρ=$rho; φ=$phi"
#		echo "   (θ=$theta)"
	done

}

function prime() {
	ops="SelectLocality IncrementHours IncrementMinutes PrintLocalNotes MakeLocalNote SetMarker PrintLog MakeNote DefineNew ShowMap ShowXLMap PlotCourse StarMass"
	if [[ "$lastworld" != "" ]]; then
		localtime "$lastworld"
	fi
#	echo -e "${lcyan}Current Time [GST]: $(cat .current):00 ${cyan}($(($(cat .current) - $(cat .markerStart))):00hr since marker)"
	echo -e "${lcyan}Current Time [GST]: $(cat .current):${offsetSimp} ${cyan}($(($(cat .current) - $(cat .markerStart))):${offsetSimp}hr since marker)"
	echo -e "${white}Choose an operation:${dgray}"
	select op in $ops; do
		if [[ "$op" == "SelectLocality" ]]; then
			worlds="$(ls)"
			echo -e "${white}Print Local Timesheet for world:${dgray}"
			select world in $worlds; do
#				localtime "$world"
				lastworld="$world"
			break
			done
		elif [[ "$op" == "IncrementHours" ]]; then
			echo -en "${white}Increment time by number of hours: ${lpurple}"
			read hcount
			inctime "$hcount"
		elif [[ "$op" == "IncrementMinutes" ]]; then
			echo -en "${white}Increment time by number of minutes: ${lpurple}"
			read mcount
			offset=$(($offset+$mcount))
			calcOffset
			echo "$(date) [GST:$(cat .current):${offsetSimp}] Time change: $mcount minutes" >> .adventure.log
#			echo "$(date) [GST:$(cat .current):${offsetSimp}] New time" >> .adventure.log
		elif [[ "$op" == "SetMarker" ]]; then
			echo -en "${lred}Reset time marker? [y/N] "
			read conf
			if [[ "$conf" == "y" ]]; then
				echo -e "${white}Marker Reset${nc}"
				echo "$(date) [GST:$(cat .current):${offsetSimp}] Marker Reset" >> .adventure.log
				cat .current > .markerStart
			fi
		elif [[ "$op" == "DefineNew" ]]; then
			echo -e "${white}Entering New Location${nc}"
			newplace
		elif [[ "$op" == "PrintLog" ]]; then
			echo -e "${white}Last 40 lines of Adventure Log:${dgray}"
			cat -n .adventure.log | tail -n 40
#			tail -n 40 .adventure.log
		elif [[ "$op" == "MakeNote" ]]; then
			echo -en "${lred}==NOTE: "
			read usernote
			echo "$(date) [GST:$(cat .current):${offsetSimp}] <NOTE> $usernote" >> .adventure.log
			echo -en ${nc}
		elif [[ "$op" == "MakeLocalNote" ]]; then
			echo -en "${lred}New note for $lastworld: "
			read localnote
			echo "$localnote" >> $lastworld/.localnotes
		elif [[ "$op" == "StarMass" ]]; then
			echo -en "${lred}New mass: "
			read massNew
			echo -n "$massNew" > $lastworld/.star/.mass
		elif [[ "$op" == "PlotCourse" ]]; then
			origin="$lastworld"
			oX="$(cat $origin/.posX)"
			oY="$(cat $origin/.posY)"
			dests="$(ls $origin/.star/Planets) Sun Edge"
			printSystemCoordinates
			select dest in $dests; do
				if [[ "$dest" == "Sun" ]]; then
					dX="0"
					dY="0"
					angleDest="NULL" #The sun has no angle relative to itself; not even an angle of zero
				elif [[ "$dest" == "Edge" ]]; then
					echo -e "${white}Select input mode:${dgray}"
					ptl="Degrees Radians"
					select pointType in $ptl; do
						if [[ "$pointType" == "Degrees" ]]; then
							echo -en "${white}Enter target θ: "
							read edgePointDeg
#							edgePointRad=$(awk -v deg=$edgePointDeg 'BEGIN{print deg/57.2958}')
						else
							echo -en "${white}Enter target φ: "
							read edgePointRad
							edgePointDeg=$(awk -v rad=$edgePointRad 'BEGIN{print rad*57.2958}')
						fi
						break
					done

					echo -en "${white}Input gravitational tolerance (_AU/M☉): "
					read edgeMult
					starMass=$(cat $lastworld/.star/.mass)

					edgeFinal=$(awk -v a=$edgeMult -v b=$starMass 'BEGIN{print a*(b/100)}')
					edgeCoord=$(awk -v a=$edgeFinal 'BEGIN{print a*10}')

					dX="$(awk -v rho=$edgeFinal -v phi=$edgePointDeg 'BEGIN{print 10*rho*cos(phi)}')"
					dY="$(awk -v rho=$edgeFinal -v phi=$edgePointDeg 'BEGIN{print 10*rho*sin(phi)}')"
					angleDest=$edgePointDeg

#					echo "from ($oX,$oY) to ($dX,$dY), a point $edgeFinal from the sun at bearing $angleDest; $edgeMult * $starMass / 100 = $edgeFinal"
				else
					dX="$(cat $dest/.posX)"
					dY="$(cat $dest/.posY)"
					angleDest=$(spacetime-orbit angle $dest)
				fi

				course="$(awk -v oX=$oX -v oY=$oY -v dX=$dX -v dY=$dY 'BEGIN{print (((dX-oX)^2+(dY-oY)^2)^(1/2))/10}')"
				angleOrigin=$(spacetime-orbit angle $origin)

				if [[ "$angleDest" == "NULL" ]]; then #Go STRAIGHT to the destination, because the destination is the very point all other cases avoid
					courseAdj="1.0"
					courseLength=$course
				else
					courseAdj="$(awk -v aO=$angleOrigin -v aD=$angleDest 'BEGIN{print -0.25*cos((aO/57.2958)-(aD/57.2958))+1.25}')"
					courseLength="$(awk -v cB=$course -v cA=$courseAdj 'BEGIN{print cB*cA}')"
				fi

				echo -e "${blue}Length of flight path to $dest: ${lblue}$courseLength AU${blue}"
				echo -e "(Direct distance: ${lblue}$course AU${blue}, multiplied by ${lblue}$courseAdj${blue})"
				break
			done
		elif [[ "$op" == "PrintLocalNotes" ]]; then
			echo -e "${yellow}Notes local to $lastworld:${orange}"
			cat $lastworld/.localnotes || echo -e "${lred}Error"
		elif [[ "$op" == "ShowMap" ]]; then
			sys=$lastworld/.star
			rm -rf .mapwork
			mkdir ".mapwork"
			for world in $(ls $lastworld/.star/Planets); do #find planet coordinates
				x=0
				y=0
				rho=$(spacetime-orbit radius $world)
				theta=$(spacetime-orbit angle $world)
				phi=$(awk -v deg=$theta 'BEGIN{print deg/57.2958}')
				x="$(awk -v rho=$rho -v phi=$phi 'BEGIN{print 10*rho*cos(phi)}')"
				y="$(awk -v rho=$rho -v phi=$phi 'BEGIN{print 10*rho*sin(phi)}')"

				echo "$x" > $world/.posX
				echo "$y" > $world/.posY

				x=${x%.*}
				y=${y%.*}
				(("$x"=="-0")) && x=0
				(("$y"=="-0")) && y=0
				echo "$x $y" > ".mapwork/$world"
				echo "$world: ($x,$y)"
				echo "   ρ=$rho; φ=$phi"
#				echo "   (θ=$theta)"
			done
			for yy in {25..-25}; do
				for xx in {-25..25}; do
					pf=0
					for world in $(ls .mapwork); do
						if [[ "$xx $yy" == "$(cat .mapwork/$world)" ]]; then
							pf=1
						fi
					done
					if [[ "$xx $yy" == "0 0" ]]; then #Star at the center
						echo -en "${yellow}O"
					elif [[ "$pf" == "1" ]]; then #Planet if the coordinates match
						echo -en "${green}o"
					elif [[ "$xx" == "0" ]]; then #Grey lines for the axes
						echo -en ${dgray}"|"
					elif [[ "$yy" == "0" ]]; then
						echo -en ${dgray}"-"
					else
						echo -en "${black}." #Spess
					fi
				done
				echo ""
			done
		elif [[ "$op" == "ShowXLMap" ]]; then
			sys=$lastworld/.star
			rm -rf .mapwork
			mkdir ".mapwork"
			for world in $(ls $lastworld/.star/Planets); do #find planet coordinates
				x=0
				y=0
				rho=$(spacetime-orbit radius $world)
				theta=$(spacetime-orbit angle $world)
				phi=$(awk -v deg=$theta 'BEGIN{print deg/57.2958}')
				x="$(awk -v rho=$rho -v phi=$phi 'BEGIN{print rho*cos(phi)}')"
				y="$(awk -v rho=$rho -v phi=$phi 'BEGIN{print rho*sin(phi)}')"

#				echo "$x" > $world/.posX
#				echo "$y" > $world/.posY

				x=${x%.*}
				y=${y%.*}
				(("$x"=="-0")) && x=0
				(("$y"=="-0")) && y=0
				echo "$x $y" > ".mapwork/$world"
				echo "$world: ($x,$y)"
				echo "   ρ=$rho; φ=$phi"
#				echo "   (θ=$theta)"
			done
			for yy in {40..-40}; do
				for xx in {-40..40}; do
					pf=0
					for world in $(ls .mapwork); do
						if [[ "$xx $yy" == "$(cat .mapwork/$world)" ]]; then
							pf=1
						fi
					done
					if [[ "$xx $yy" == "0 0" ]]; then #Star at the center
						echo -en "${yellow}O"
					elif [[ "$pf" == "1" ]]; then #Planet if the coordinates match
						echo -en "${green}o"
					elif [[ "$xx" == "0" ]]; then #Grey lines for the axes
						echo -en ${dgray}"|"
					elif [[ "$yy" == "0" ]]; then
						echo -en ${dgray}"-"
					else
						echo -en "${black}." #Spess
					fi
				done
				echo ""
			done
		fi
	break
	done
	calcOffset
	echo -e "${dgray}-------"
}

calcOffset
while true; do
	prime
done
